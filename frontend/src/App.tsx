import { useState, KeyboardEvent, useEffect } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'

// Import the Go bindings generated by Wails
declare global {
  interface Window {
    go: {
      main: {
        App: {
          SendMessage(message: string): Promise<string>
          GetMessages(): Promise<Message[]>
        }
      }
    }
  }
}

// Use window.go.main.App for now until proper types are generated
const SendMessage = (message: string) => window.go.main.App.SendMessage(message)
const GetMessages = () => window.go.main.App.GetMessages()

type Message = {
  role: 'user' | 'assistant'
  content: string
}

function App() {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  // Load existing messages on startup
  useEffect(() => {
    GetMessages()
      .then((msgs: any) => setMessages(msgs as Message[]))
      .catch(err => console.error('Error loading messages:', err))
  }, [])

  const handleSubmit = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = { role: 'user', content: input.trim() }
    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      const response = await SendMessage(userMessage.content)
      setMessages(prev => [...prev, { role: 'assistant', content: response }])
    } catch (error) {
      console.error('Error sending message:', error)
      setMessages(prev => [
        ...prev,
        { role: 'assistant', content: 'Sorry, there was an error processing your request.' }
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {
      e.preventDefault()
      handleSubmit()
    }
  }

  return (
    <div className="flex flex-col h-screen max-h-screen p-4">
      {/* Chat history */}
      <div className="flex-1 overflow-y-auto mb-4 p-4 border rounded-lg">
        {messages.length === 0 ? (
          <div className="text-center text-muted-foreground py-8">Start a conversation</div>
        ) : (
          messages.map((message, index) => (
            <div
              key={index}
              className={`mb-4 p-3 rounded-lg ${
                message.role === 'user'
                  ? 'bg-primary text-primary-foreground ml-12'
                  : 'bg-muted mr-12'
              }`}
            >
              {message.role === 'assistant' ? (
                <div className="prose max-w-none">
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm]}
                    components={{
                      ul: ({ node, ...props }) => (
                        <ul className="list-disc ml-6" {...props} />
                      ),
                      ol: ({ node, ...props }) => (
                        <ol className="list-decimal ml-6" {...props} />
                      ),
                      a: ({ node, ...props }) => (
                        <a {...props} target="_blank" rel="noreferrer" />
                      )
                    }}
                  >
                    {message.content}
                  </ReactMarkdown>
                </div>
              ) : (
                <p>{message.content}</p>
              )}
            </div>
          ))
        )}
        {isLoading && (
          <div className="flex justify-center items-center py-4">
            <div className="animate-pulse text-muted-foreground">AI is thinking...</div>
          </div>
        )}
      </div>

      {/* Input area */}
      <div className="border rounded-lg p-2 flex gap-2">
        <Textarea
          placeholder="Type your message here..."
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          className="flex-1 min-h-[60px]"
          disabled={isLoading}
        />
        <Button
          onClick={handleSubmit}
          className="self-end"
          disabled={isLoading || !input.trim()}
        >
          {isLoading ? 'Sending...' : 'Send'}
        </Button>
      </div>
    </div>
  )
}

export default App